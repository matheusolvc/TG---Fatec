// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TG001.Repo.Contexto;

namespace TG001.Repo.Migrations
{
    [DbContext(typeof(ContasAPagarContexto))]
    [Migration("20190915140728_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TG001.Models.Colaborador", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agencia");

                    b.Property<string>("CPF");

                    b.Property<string>("CodBanco");

                    b.Property<string>("Conta");

                    b.Property<string>("Email");

                    b.Property<string>("Matricula");

                    b.Property<string>("Nome");

                    b.Property<string>("Senha");

                    b.HasKey("ID");

                    b.ToTable("Colaboradores");
                });

            modelBuilder.Entity("TG001.Models.Conta", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataEmissao");

                    b.Property<DateTime>("DataPagamento");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<double>("Juros");

                    b.Property<int?>("LoteID");

                    b.Property<double>("Multa");

                    b.Property<string>("Status");

                    b.Property<int>("TipoConta");

                    b.Property<int?>("UsuarioID");

                    b.Property<double>("ValorAPagar");

                    b.Property<double>("ValorDocumento");

                    b.HasKey("ID");

                    b.HasIndex("LoteID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Conta");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Conta");
                });

            modelBuilder.Entity("TG001.Models.Fornecedor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Agencia");

                    b.Property<string>("Bairro");

                    b.Property<string>("CNPJ");

                    b.Property<string>("Cidade");

                    b.Property<string>("CodBanco");

                    b.Property<string>("Conta");

                    b.Property<string>("Email");

                    b.Property<string>("Endereco");

                    b.Property<string>("Numero");

                    b.Property<string>("RazaoSocial");

                    b.Property<string>("Telefone");

                    b.Property<string>("UF");

                    b.HasKey("ID");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("TG001.Models.Lote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAlteracao");

                    b.Property<DateTime>("DataGeracao");

                    b.Property<string>("StatusTransmissao");

                    b.Property<int?>("UsuarioID");

                    b.Property<double>("ValorTotalLote");

                    b.HasKey("ID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("Lotes");
                });

            modelBuilder.Entity("TG001.Models.RetornoLote", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("LoteID");

                    b.Property<string>("Mensagem");

                    b.Property<string>("StatusTransmissao");

                    b.HasKey("ID");

                    b.HasIndex("LoteID");

                    b.ToTable("RetornosLote");
                });

            modelBuilder.Entity("TG001.Models.Usuario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<int>("Matricula");

                    b.Property<string>("SenhaCrip");

                    b.Property<string>("TipoUsuario");

                    b.HasKey("ID");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("TG001.Models.Boleto", b =>
                {
                    b.HasBaseType("TG001.Models.Conta");

                    b.Property<int?>("FornecedorID");

                    b.Property<string>("LinhaDigitavel");

                    b.HasIndex("FornecedorID");

                    b.HasDiscriminator().HasValue("Boleto");
                });

            modelBuilder.Entity("TG001.Models.Imposto", b =>
                {
                    b.HasBaseType("TG001.Models.Conta");

                    b.Property<string>("CNPJMatriz");

                    b.Property<int>("CodigoImposto");

                    b.Property<string>("LinhaDigitavel")
                        .HasColumnName("Imposto_LinhaDigitavel");

                    b.Property<TimeSpan>("PeriodoApuracao");

                    b.HasDiscriminator().HasValue("Imposto");
                });

            modelBuilder.Entity("TG001.Models.OutraConta", b =>
                {
                    b.HasBaseType("TG001.Models.Conta");

                    b.Property<int?>("FornecedorID")
                        .HasColumnName("OutraConta_FornecedorID");

                    b.HasIndex("FornecedorID");

                    b.HasDiscriminator().HasValue("OutraConta");
                });

            modelBuilder.Entity("TG001.Models.Reembolso", b =>
                {
                    b.HasBaseType("TG001.Models.Conta");

                    b.Property<int?>("ColaboradorID");

                    b.Property<DateTime>("DataRecibo");

                    b.Property<string>("Descricao");

                    b.HasIndex("ColaboradorID");

                    b.HasDiscriminator().HasValue("Reembolso");
                });

            modelBuilder.Entity("TG001.Models.Renegociacao", b =>
                {
                    b.HasBaseType("TG001.Models.Conta");

                    b.Property<DateTime>("DataSolicitacao");

                    b.Property<DateTime>("NovaDataVencimento");

                    b.Property<double>("NovoValor");

                    b.Property<string>("Observacao");

                    b.Property<int>("QuantidadeParcelas");

                    b.Property<string>("TipoRenegociacao");

                    b.HasDiscriminator().HasValue("Renegociacao");
                });

            modelBuilder.Entity("TG001.Models.Conta", b =>
                {
                    b.HasOne("TG001.Models.Lote")
                        .WithMany("Contas")
                        .HasForeignKey("LoteID");

                    b.HasOne("TG001.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("TG001.Models.Lote", b =>
                {
                    b.HasOne("TG001.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("TG001.Models.RetornoLote", b =>
                {
                    b.HasOne("TG001.Models.Lote", "Lote")
                        .WithMany()
                        .HasForeignKey("LoteID");
                });

            modelBuilder.Entity("TG001.Models.Boleto", b =>
                {
                    b.HasOne("TG001.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID");
                });

            modelBuilder.Entity("TG001.Models.OutraConta", b =>
                {
                    b.HasOne("TG001.Models.Fornecedor", "Fornecedor")
                        .WithMany()
                        .HasForeignKey("FornecedorID");
                });

            modelBuilder.Entity("TG001.Models.Reembolso", b =>
                {
                    b.HasOne("TG001.Models.Colaborador", "Colaborador")
                        .WithMany()
                        .HasForeignKey("ColaboradorID");
                });
#pragma warning restore 612, 618
        }
    }
}
